@import url(//fonts.googleapis.com/css?family=Open+Sans:400,700,800,300);
/* font works. Just remember to use the "font-family" in the future. */

body {
  margin: 0;  /* get rid of the nasty border frame around the page */
  padding: 0;
  font-family: 'Open Sans','Helvetica Neue',Helvetica, sans-serif;
  line-height: 1.45;
}


/* everything header is here */
header {
  color: #fff;
  background-color: #284b63;
  padding: 80px 0;
  text-align: center;
}
.container {
  margin: 0 auto;   /*ensures that the content stays at the center of
  the container, irrespective of its size.*/
  padding: 0 20px 0 20px;
  max-width: 900px;   /*On a screen that is larger than 900px in width,
   the container div will have the width of 900px, so we align it to
   the center of the screen. */
}
h1 {
  font-size: 48px;
  margin: 0 0 16px 0;
}
h2 {
  font-weight: 300;
  font-size: 24px;
  margin: 0 0 16px 0;
}
.btn {
  display: inline-block;  /*The display property specifies the display behavior of the element*/
  color: white;
  font-weight: 500;
  font-size: 20px;
  background: rgb(84, 157, 160);
  border: none;
  border-radius: 5px;
  padding: 12px 16px;
  cursor: pointer;
}
.btn:hover {
  background: #468486;    /* color changes on hover now*/
}
.submenu {
  left: 50%;
  transform: translate(-50%, 0);
  text-align: center;
  position: absolute;
  background-color: rgb(84, 157, 160);
  min-width: 160px;
  border-radius: 5px;
  box-shadow: 0 8px 16px 0px rgba(0, 0, 0, 0.2);
  display: none;    /* This was added to hide the submenu until the JQuery calls it*/
}
.submenu a {
  color: white;
  padding: 12px 16px;
  text-decoration: none;
  display: block;
}
.submenu a:hover {
  background-color: #468486;
}


/* this all is the features section */
section {
  padding: 40px 0;
  text-align: center;
}
.features {
  background: #fff;
  color: #000;
}
.feature {
  /*By using only % values for the widths, the features will always
  remain next to each other and be positioned horizontally,
  irrespective of the browser width.*/
  width: 32%;
  display: inline-block; /* all on one line unless width is too large */
  font-size: 16px;
}
.feature img {
  width: 40%;
}

/*  The Quote section */
.quote {
  background: rgb(84, 157, 160);    /* hex code wouldn't load. Google thing? */
  color: #fff;
}
blockquote {
  margin: 0;  /*  First, we need to reset the padding/margin of the
   blockquote element since the browsers have some default values
    for them. We also define the font sizes and margins for the elements. */
  padding: 0;
  text-align: center;
}
blockquote p {
  margin: 0 0 5px 0;
  font-size: 24px;
}
blockquote cite {
  font-size: 16px;
  font-style: italic;
}
blockquote cite:before { /* Last but not least, we use the :before
  selector to set a dash before the cite element.  */
  content: '-'; /* We could have added the dash in the text of the
  cite tag, but this is a fancier way of doing the same thing. */
  margin-right: 5px;
}


/* Aaand now the footer
Here we put the menu and copyright text */
footer {
  background: #353535;
  padding: 32px 0;
  text-align: center;
  color: #868686;
  font-size: 12px;
}
footer ul {
  margin: 0;
  padding: 0;
  list-style: none;   /*  make the menu list horizontal and remove the bullets  */
}
footer li {
  display: inline-block;  /* now list items are horizontal */
}
footer li a {
  padding: 6px;
  font-size: 14px;
  text-decoration: none;
  color: #c3c3c3;
}
footer li a:hover {
  color: white;
}





@media screen and (max-width: 480px) {
  .btn {
    display: block;
    font-size: 18px;
  }
  h1 {
    font-size: 32px;
    margin: 0 0 8px 0;
  }
  h2 {
    font-size: 18px;
  }
  section {
    padding: 25px 0 15px 0;
  }
/*  As you can see, we changed some font-size properties, changed the
 paddings of the section container, and changed the button's display
 property to block, making it a block level element which takes the
 whole width of its container.

 Note, that we do not need to redefine the whole style for the elements
  in the media query. We only need to define the style we want to change.*/

.submenu {    /* make the submenu cover the screen for mobile app */
  width: 100%;
  position: relative;
}

.feature {
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: left;
  margin: 0 0 10px 0;
  font-size: 16px;
}
.feature img {
  width: 15%;
  min-width: 60px;
  margin-right: 20px;
}

.quote {
  padding: 30px 0;
}
blockquote p {
  font-size: 18px;
}
blockquote cite {
  font-size: 14px;


}

footer {
  padding: 30px 0 10px 0;
}
footer li {
  display: block;
  margin: 5px 0;  /*  makes the list items block level elements so they
   take the entire width of their container. This makes the items align
    under each other on a small screen.  */
}


} /* end of the mobile @media section */





/*
* viewport: the visible area of a web page.

<meta name="viewport" content="width=device-width, initial-scale=1.0">

width=device-width sets the width of the page to follow the screen-width of
 the device.
initial-scale=1.0 sets the initial zoom level when the page is first
loaded by the browser.




* Media queries provide the ability to specify different CSS styles for
different widths of the viewport, or other specifications.
This makes it possible for a web page to define different layout styles
 for different screen sizes and make the page responsive!

 @media screen and (max-width: 600px) {
   body {
     background-color: blue;
  }
}

The @media rule is followed by the media type we are targeting
(the screen in our case) and sets the condition when the rules apply
 (max-width:600px in our case).
So now, the style will apply if the page has a width up to 600px.

You can also define multiple conditions, for example a max and min
 width of the viewport:

 @media screen and (min-width: 800px) and (max-width: 1024px) {
   body {
     background-color: blue;
  }
}

Now the style will apply for screen sizes from 800 to 1024px.

You can also define multiple media queries for a single web page.
Media queries allow you to define breakpoints when the page layout
and style should change, as well as define the corresponding CSS styles
 for these breakpoints.



* Responsive header
A typical breakpoint for a mobile screen is 480px width.
Let's define the viewport and empty media query target for our landing page:
@media screen and (max-width: 480px) {  }


* CSS Units
An important part of our layout was not using any fixed units for our widths.
We used percentage values, which made the elements span relative to the width
of their parents. This approach allows elements to be more flexible,
which is essential when putting together a responsive design.

CSS also allows for px, and em. Em is px * 1.5? 16px * 1.5 em = 26px
 10px * 1.5em = 15px.
 Rem is also relative. It stands for Root Em, meaning that it only looks
  at the font-size of the root element, which is the html element.


*/
